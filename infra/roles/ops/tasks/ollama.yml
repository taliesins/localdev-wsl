# code: language=ansible
---

- name: Ensure group "ollama" exists
  become: true
  ansible.builtin.group:
    name: ollama
    state: present

- name: Add the user 'ollama' and a primary group of 'ollama', appending the groups 'render' and 'video' to the user's groups
  become: true
  ansible.builtin.user:
    name: ollama
    group: ollama
    shell: /bin/false
    create_home: true
    home: /usr/share/ollama
    system: true
    groups: render,video
    append: yes

- name: Add to ollama group members
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: ollama
    append: true
  with_items:
    - "{{ user }}"
  register: add_to_ollama_group_result

- name: Include reset connection tasks
  ansible.builtin.include_tasks: reset-connection.yml
  when: add_to_ollama_group_result.changed == true

- name: Check if Ollama is installed and retrieve version
  become: true
  ansible.builtin.command: "{{ ollama_install_dir }}/bin/ollama -v"
  register: ollama_current_version
  failed_when: ollama_current_version.rc not in [0, 1, 2]
  changed_when: false

- name: Set fact for version presence
  set_fact:
    ollama_installed: "{{ ollama_current_version.rc == 0 }}"
    ollama_version_match: "{{ ollama_version in ollama_current_version.stdout }}"
  changed_when: false

- name: Remove existing Ollama installation if version mismatch or not installed
  become: true
  ansible.builtin.file:
    path: '{{ ollama_install_dir }}'
    state: absent
  when:
    - not ollama_installed or not ollama_version_match

- name: Create Ollama installation directory
  become: true
  ansible.builtin.file:
    path: '{{ ollama_install_dir }}'
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Download Ollama package
  become: true
  ansible.builtin.get_url:
    url: '{{ ollama_mirror }}/{{ ollama_filename }}'
    dest: '{{ ollama_download_dir }}/{{ ollama_filename }}'
    mode: '0644'
  when:
    - not ollama_installed or not ollama_version_match

- name: Install Ollama
  become: true
  ansible.builtin.unarchive:
    src: '{{ ollama_download_dir }}/{{ ollama_filename }}'
    dest: '{{ ollama_install_dir }}'
    remote_src: true
    owner: root
    group: root
    mode: '0755'
  when:
    - not ollama_installed or not ollama_version_match

- name: Create symbolic link for Ollama bin - /usr/local/bin/ollama
  become: true
  ansible.builtin.file:
    src: '{{ ollama_install_dir }}/bin/ollama'
    dest: '/usr/local/bin/ollama'
    state: link
    owner: root
    group: root
    mode: '0755'

- name: Create symbolic link for Ollama lib - /usr/local/lib/ollama
  become: true
  ansible.builtin.file:
    src: '{{ ollama_install_dir }}/lib/ollama'
    dest: '/usr/local/lib/ollama'
    state: link
    owner: root
    group: root
    mode: '0755'

- name: Create symbolic link for Ollama - {{ ollama_install_dir }}/ollama
  become: true
  ansible.builtin.file:
    src: '{{ ollama_install_dir }}/bin/ollama'
    dest: '{{ ollama_install_dir }}/ollama'
    state: link
    owner: root
    group: root
    mode: '0755'

- name: Configure Ollama systemd service
  become: true
  ansible.builtin.template:
    src: systemd-ollama-service.j2
    dest: /etc/systemd/system/ollama.service
    mode: '0644'
  register: service_updated

- name: Reload systemd
  become: true
  ansible.builtin.command: systemctl daemon-reload
  when: service_updated.changed

- name: Reload systemd and restart service if needed
  become: true
  ansible.builtin.systemd:
    name: ollama
    daemon_reload: yes
    enabled: yes
    state: restarted
  when:
    - service_updated.changed
    - not ollama_installed or not ollama_version_match
