# code: language=ansible
---
# Taken from https://kubernetes.io/blog/2019/03/15/kubernetes-setup-using-ansible-and-vagrant/

- name: Install packages that are needed by docker
  become: true
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
    - iptables-persistent

- name: Install pip packages that are needed by docker for root
  become: true
  ansible.builtin.pip:
    break_system_packages: true
    name:
      - docker

- name: Install pip packages that are needed by docker for user
  become: true
  become_user: '{{ user }}'
  ansible.builtin.pip:
    break_system_packages: true
    name:
      - docker      

- name: Add an apt signing key for Docker
  become: true
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /usr/share/keyrings/docker.asc
    mode: 'u=rw,g=r,o=r'
    force: true

- name: Add apt repository for Docker stable version
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable
    state: present

# https://github.com/microsoft/WSL/issues/6655
- name: Use IpTables legacy
  become: true
  community.general.alternatives:
    name: iptables
    path: /usr/sbin/iptables-legacy

# https://github.com/microsoft/WSL/issues/6655
- name: Use ip6tables legacy
  become: true
  community.general.alternatives:
    name: ip6tables
    path: /usr/sbin/ip6tables-legacy

- name: Check current IPv4 FORWARD policy
  become: true
  ansible.builtin.command: iptables -S FORWARD
  register: iptables_policy_ipv4

- name: Set IPv4 FORWARD policy to ACCEPT if not set
  become: true
  ansible.builtin.command: iptables -P FORWARD ACCEPT
  when: "'-P FORWARD ACCEPT' not in iptables_policy_ipv4.stdout"

- name: Check current IPv6 FORWARD policy
  become: true
  ansible.builtin.command: ip6tables -S FORWARD
  register: iptables_policy_ipv6

- name: Set IPv6 FORWARD policy to ACCEPT if not set
  become: true
  ansible.builtin.command: ip6tables -P FORWARD ACCEPT
  when: "'-P FORWARD ACCEPT' not in iptables_policy_ipv6.stdout"

- name: Install Docker and its dependecies
  become: true
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - docker-ce
    - docker-ce-cli
    #- containerd.io

- name: Create Docker configuration directory
  become: true
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: 'u=rwx,g=rx,o=rx'

- name: Check if nvidia device
  ansible.builtin.stat:
    path:  /mnt/c/Windows/System32/lxss/lib/libcuda.so.1.1
  register: folder_check

- name: Set variable if folder exists
  ansible.builtin.set_fact:
    use_nvidia: "{{ folder_check.stat.exists | default(false) }}"

# https://docs.docker.com/engine/reference/commandline/dockerd/#linux-configuration-file
- name: Set Docker daemon.json
  become: true
  ansible.builtin.template:
    src: etc-docker-daemon-json.j2
    dest: /etc/docker/daemon.json
    mode: 'u=rw,g=r,o=r'
  register: update_docker_config_result

# change service file to remove _H options from service file to be able to use daemon.json
- name: Update Docker service to remove options
  become: true
  ansible.builtin.replace:
    path:  /usr/lib/systemd/system/docker.service
    regexp: ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
    replace: ExecStart=/usr/bin/dockerd --containerd={{ docker_containerd_address }}
  register: update_docker_service_use_containerd_socket_result

- name: Update Docker service to switch containerd service
  become: true
  ansible.builtin.replace:
    path:  /usr/lib/systemd/system/docker.service
    regexp: containerd.service
    replace: snap.microk8s.daemon-containerd.service
  register: update_docker_service_use_microk8s_containerd_service_result  

- name: Reload systemd
  become: true
  ansible.builtin.command: systemctl daemon-reload
  when: update_docker_service_use_containerd_socket_result.changed or update_docker_service_use_microk8s_containerd_service_result.changed

- name: Restart Docker service
  become: true
  ansible.builtin.service:
    name: docker
    state: restarted
  when: update_docker_service_use_containerd_socket_result.changed or update_docker_service_use_microk8s_containerd_service_result.changed or update_docker_config_result.changed

- name: Start Docker service
  become: true
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  when: not (update_docker_service_use_containerd_socket_result.changed or update_docker_service_use_microk8s_containerd_service_result.changed) and not update_docker_config_result.changed

- name: Stop ContainerD service
  become: true
  ansible.builtin.service:
    name: containerd
    state: stopped
    enabled: false
  when: update_docker_service_use_microk8s_containerd_service_result.changed

- name: Set Docker group members
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items:
    - "{{ user }}"
  register: add_to_docker_group_result

- name: Include reset connection tasks
  ansible.builtin.include_tasks: reset-connection.yml
  when: add_to_docker_group_result.changed == true
