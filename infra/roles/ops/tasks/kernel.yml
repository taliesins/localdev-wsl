# code: language=ansible
---
- name: Install unarchive module dependencies
  become: true
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - tar
    - unzip
    - gzip

- name: Create download directory for addon options
  ansible.builtin.file:
    state: directory
    mode: 'u=rwx,g=rx,o=rx'
    dest: '{{ kernel_download_dir }}/{{ kernel_addon_filename }}'

- name: Download Kernel AddOn
  ansible.builtin.get_url:
    url: '{{ kernel_mirror }}/bzImage-{{ kernel_arch }}-addon_install.tar.gz'
    dest: '{{ kernel_download_dir }}/{{ kernel_addon_filename }}.tar.gz'
    #checksum: "sha256:{{ kernel_mirror }}/{{ kernel_addon_filename }}.sha256"
    force: false
    validate_certs: true
    mode: 'u=rw,g=r,o=r'
  register: kernel_addon_downloaded

- name: Extract Kernel AddOn
  become: true
  ansible.builtin.unarchive:
    src: '{{ kernel_download_dir }}/{{ kernel_addon_filename }}.tar.gz'
    dest: '{{ kernel_download_dir }}/{{ kernel_addon_filename }}'
    owner: root
    group: root
    mode: 'o-w'
    creates: '{{ kernel_download_dir }}/{{ kernel_addon_filename }}/bzImage-x86_64-modules_install'
  register: kernel_addon_extracted

- name: Ensure Modules directory is present
  become: true
  file:
    path: /usr/lib/modules/{{ kernel_version }}-WSL2-STABLE+
    state: directory
    owner: root
    group: root
    mode: '0755'
  register: addon_directory

- name: Install Kernel Modules
  become: true
  ansible.builtin.shell: |
    ./addon-install.sh
  args:
    executable: /bin/bash
    chdir: "{{ kernel_download_dir }}/{{ kernel_addon_filename }}/bzImage-x86_64-addon_install"
    creates: "{{ kernel_download_dir }}/{{ kernel_addon_filename }}/run_once"
  when: addon_directory.changed or kernel_addon_downloaded.changed or kernel_addon_extracted.changed

- name: Setup network kernel modules
  become: true
  ansible.builtin.template:
    src: etc-modules-load-d-network-conf.j2
    dest: /etc/modules-load.d/network.conf
    mode: 'u=rw,g=r,o=r'

- name: Setup usb kernel modules
  become: true
  ansible.builtin.template:
    src: etc-modules-load-d-usb-conf.j2
    dest: /etc/modules-load.d/usb.conf
    mode: 'u=rw,g=r,o=r'

- name: Setup storage kernel modules
  become: true
  ansible.builtin.template:
    src: etc-modules-load-d-storage-conf.j2
    dest: /etc/modules-load.d/storage.conf
    mode: 'u=rw,g=r,o=r'

- name: Setup systemd modules to load modules
  become: true
  ansible.builtin.template:
    src: systemd-modules-load-service.j2
    dest: /lib/systemd/system/systemd-modules-load.service
    mode: 'u=rw,g=r,o=r'
  register: systemd_modules_load_service

- name: Reload the systemD daemon
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true
  when: systemd_modules_load_service.changed

- name: Restart systemd
  become: true
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: systemd-modules-load
  when: systemd_modules_load_service.changed or kernel_addon_downloaded.changed or kernel_addon_extracted.changed
