# code: language=ansible
---

######################################################
## Custom Kernel
######################################################

kernel_version: "6.14.6"
kernel_arch: "x86_64"
kernel_mirror: "https://github.com/taliesins/WSL2-Linux-Kernel-Rolling/releases/download/linux-wsl-stable-{{ kernel_version }}"
kernel_addon_filename: "bzImage-{{ kernel_arch }}-addon_install-{{ kernel_version }}"
kernel_download_dir: "{{ download_path }}"

######################################################
## Docker
######################################################

docker_nvidia_test_image: "nvcr.io/nvidia/cuda:12.8.0-base-ubuntu22.04"
docker_containerd_address: "{{ '/var/snap/microk8s/common/run/containerd.sock' if k8s_distribution == 'microk8s' else '/run/k3s/containerd/containerd.sock' }}"

# docker_networking_ipv6: "true"
# docker_networking_bip: "{{ docker_network_bip_ipv4_cidr }}"
# docker_networking_bip6: "{{ docker_network_bip_ipv6_cidr }}"
# docker_networking_fixed_cidr: "{{ docker_network_pool_ipv4_cidr }}"
# docker_networking_fixed_cidr_v6: "{{ docker_network_pool_ipv6_cidr }}"

# "ipv6": {{ docker_networking_ipv6 }},
# "bip": "{{ docker_networking_bip }}",
# "bip6": "{{ docker_networking_bip6 }}",
# "fixed-cidr": "{{ docker_networking_fixed_cidr }}",
# "fixed-cidr-v6": "{{ docker_networking_fixed_cidr_v6 }}",

#"fixed-cidr": "192.168.1.0/25",
#"fixed-cidr-v6": "2001:db8::/64",
# "default-gateway": "192.168.1.254",
# "default-gateway-v6": "2001:db8:abcd::89",
# "mtu": 1500,
# "dns": ["10.1.0.10","fd69:fd69:fd69:100::1"],

######################################################
## Ollama
######################################################

# Ollama version number
ollama_version: '0.6.8'

# The CPU architecture of the Ollama executable to install
ollama_architecture: 'amd64'

# Operating system on which "Ollama" should run on
ollama_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download Ollama from
ollama_mirror: 'https://github.com/ollama/ollama/releases/download/v{{ ollama_version }}'

ollama_filename: "ollama-{{ ollama_os }}-{{ ollama_architecture }}.tgz"

# Dir where Ollama should be installed
ollama_install_dir: '/usr/local/share/ollama'

# Directory to store files downloaded for Ollama
ollama_download_dir: "{{ download_path }}"

ollama_host: "0.0.0.0:11434"

######################################################
## Kubectl
######################################################

# "kubectl" version to install
kubectl_version: "1.32.1"

# Processor architecture "kubectl" should run on
kubectl_arch: "amd64"  # other possible values: "386","arm64","arm","ppc64le","s390x"

# Operating system on which "kubectl" should run on
kubectl_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download Kubectl from
kubectl_mirror: "https://dl.k8s.io/v{{ kubectl_version }}"
#kubectl_hash_mirror: "https://cdn.dl.k8s.io/release/v{{ kubectl_version }}"

kubectl_filename: "kubernetes-client-{{ kubectl_os }}-{{ kubectl_arch }}.tar.gz"

# Dir where Kubectl should be installed
kubectl_install_dir: '/usr/local/share/kubectl'

# Directory to store files downloaded for kubectl
kubectl_download_dir: "{{ download_path }}"

######################################################
## Helm
######################################################

# Helm version number
helm_version: '3.17.3'

# The CPU architecture of the Helm executable to install
helm_architecture: 'amd64'

# Operating system on which "helm" should run on
helm_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download Helm from
helm_mirror: 'https://get.helm.sh'

helm_filename: "helm-v{{ helm_version }}-{{ helm_os }}-{{ helm_architecture }}.tar.gz"

# Dir where Helm should be installed
helm_install_dir: '/usr/local/share/helm'

# Directory to store files downloaded for Helm
helm_download_dir: "{{ download_path }}"

######################################################
## Cilium CLI
######################################################

# Cilium version number
cilium_cli_version: '0.18.3'

# The CPU architecture of the Cilium executable to install
cilium_cli_architecture: 'amd64'

# Operating system on which "cilium" should run on
cilium_cli_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download Cilium from
cilium_cli_mirror: 'https://github.com/cilium/cilium-cli/releases/download/v{{ cilium_cli_version }}'

cilium_cli_filename: "cilium-{{ cilium_cli_os }}-{{ cilium_cli_architecture }}.tar.gz"

# Dir where Cilium should be installed
cilium_cli_install_dir: '/usr/local/share/cilium'

# Directory to store files downloaded for Cilium
cilium_cli_download_dir: "{{ download_path }}"

######################################################
## nerdctl
######################################################

# NerdCtl version number
nerdctl_version: '2.0.5'

# The CPU architecture of the NerdCtl executable to install
nerdctl_architecture: 'amd64'

# Operating system on which "cilium" should run on
nerdctl_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download NerdCtl from
nerdctl_mirror: 'https://github.com/containerd/nerdctl/releases/download/v{{ nerdctl_version }}'

nerdctl_filename: "nerdctl-{{ nerdctl_version }}-{{ nerdctl_os }}-{{ nerdctl_architecture }}.tar.gz"

# Dir where NerdCtl should be installed
nerdctl_install_dir: '/usr/local/share/nerdctl'

# Directory to store files downloaded for NerdCtl
nerdctl_download_dir: "{{ download_path }}"
nerdctl_containerd_address: "{{ '/var/snap/microk8s/common/run/containerd.sock' if k8s_distribution == 'microk8s' else '/run/k3s/containerd/containerd.sock' }}"

######################################################
## K3D CLI
######################################################

# K3D version number
k3d_cli_version: '5.8.3'

# The CPU architecture of the K3D executable to install
k3d_cli_architecture: 'amd64'

# Operating system on which "cilium" should run on
k3d_cli_os: "linux"  # use "darwin" for MacOS X, "windows" for Windows

# Mirror to download K3D from
k3d_cli_mirror: 'https://github.com/k3d-io/k3d/releases/download/v{{ k3d_cli_version }}'

k3d_cli_filename: "k3d-{{ k3d_cli_os }}-{{ k3d_cli_architecture }}"

# Dir where K3D should be installed
k3d_cli_install_dir: '/usr/local/share/k3d'

######################################################
## RKE2
######################################################

rke2_version: "v1.32.4+rke2r1"
node_name: "{{ cluster_name }}"

rke2_bind_address: "::"
rke2_ipv4_support: "{{ kubernetes_ipv4_support if kubernetes_ipv4_support | length > 0 else (wsl_host_primary_ipv4_address | length > 0) }}"
rke2_ipv6_support: "{{ kubernetes_ipv6_support if kubernetes_ipv6_support | length > 0 else (wsl_host_primary_ipv6_address | length > 0) }}"

rke2_advertise_address: >-
  {{ wsl_host_primary_ipv6_address if rke2_ipv6_support | bool else wsl_host_primary_ipv4_address }}

rke2_node_ips: >-
  {{
    ([wsl_host_primary_ipv4_address] if rke2_ipv4_support | bool else [])
    +
    ([wsl_host_primary_ipv6_address] if rke2_ipv6_support | bool else [])
  }}

rke2_node_external_ips: >-
  {{
    ([wsl_host_primary_ipv4_address] if rke2_ipv4_support | bool else [])
    +
    ([wsl_host_primary_ipv6_address] if rke2_ipv6_support | bool else [])
  }}

rke2_internal_node_ips: >-
  {{
    ([
      kubernetes_cluster_service_ipv4_cidr | ansible.utils.ipaddr('network') | ansible.utils.ipmath('1') | ansible.utils.ipaddr('address')
    ] if rke2_ipv4_support | bool else [])
    +
    ([
      kubernetes_cluster_service_ipv6_cidr | ansible.utils.ipaddr('network') | ansible.utils.ipmath('1') | ansible.utils.ipaddr('address')
    ] if rke2_ipv6_support | bool else [])
  }}

rke2_cluster_cidrs: >-
  {{
    ([kubernetes_cluster_network_ipv4_cidr] if rke2_ipv4_support | bool else [])
    +
    ([kubernetes_cluster_network_ipv6_cidr] if rke2_ipv6_support | bool else [])
  }}

rke2_service_cidrs: >-
  {{
    ([kubernetes_cluster_service_ipv4_cidr] if rke2_ipv4_support | bool else [])
    +
    ([kubernetes_cluster_service_ipv6_cidr] if rke2_ipv6_support | bool else [])
  }}

rke2_cluster_dns_ipv4: >-
  {{
    kubernetes_cluster_service_ipv4_cidr
    | ansible.utils.ipaddr('network')
    | ansible.utils.ipmath('4')
    | ansible.utils.ipaddr('address')
    if rke2_ipv4_support | bool else ''
  }}

rke2_cluster_dns_ipv6: >-
  {{
    kubernetes_cluster_service_ipv6_cidr
    | ansible.utils.ipaddr('network')
    | ansible.utils.ipmath('4')
    | ansible.utils.ipaddr('address')
    if rke2_ipv6_support | bool else ''
  }}

rke2_cluster_dns_ips_ipv4_only: >-
  {{
    [rke2_cluster_dns_ipv4] if rke2_ipv4_support | bool else []
  }}

rke2_cluster_dns_ips_ipv6_only: >-
  {{
    [rke2_cluster_dns_ipv6] if rke2_ipv6_support | bool else []
  }}

rke2_cluster_dns_ips: >-
  {{
    ( [rke2_cluster_dns_ipv4] if rke2_ipv4_support | bool else [] )
    +
    ( [rke2_cluster_dns_ipv6] if rke2_ipv6_support | bool else [] )
  }}

rke2_external_dns_names: >-
  {{
    [cluster_name ~ '.' ~ tld, cluster_name]
    + ([ansible_hostname] if ansible_hostname != cluster_name else [])
    + ([ansible_fqdn] if '.' in ansible_fqdn and ansible_fqdn | regex_search('[^.]\.[^.]+$') and ansible_fqdn != (cluster_name ~ '.' ~ tld) else [])
  }}
rke2_cluster_domain: "cluster.local"

######################################################
## microk8s
######################################################

microk8s_version: "1.32"

microk8s_channel: "{{ microk8s_version }}/stable"

microk8s_ipv4_support: "{{ kubernetes_ipv4_support if kubernetes_ipv4_support | length > 0 else (wsl_host_primary_ipv4_address | length > 0) }}"
microk8s_ipv4_cluster_cidr: "{{ kubernetes_cluster_network_ipv4_cidr }}"
microk8s_ipv4_service_cidr: "{{ kubernetes_cluster_service_ipv4_cidr }}"
microk8s_ipv6_support: "{{ kubernetes_ipv6_support if kubernetes_ipv6_support | length > 0 else (wsl_host_primary_ipv6_address | length > 0) }}"
microk8s_ipv6_cluster_cidr: "{{ kubernetes_cluster_network_ipv6_cidr }}"
microk8s_ipv6_service_cidr: "{{ kubernetes_cluster_service_ipv6_cidr }}"

microk8s_extra_sans: >-
  {{ wsl_host_primary_all_address + 
     [kubernetes_cluster_service_ipv4_cidr | ansible.utils.ipaddr('network') | ansible.utils.ipmath('1') | ansible.utils.ipaddr('address')] + 
     [kubernetes_cluster_service_ipv6_cidr | ansible.utils.ipaddr('network') | ansible.utils.ipmath('1') | ansible.utils.ipaddr('address')] }}

microk8s_host_access_ip: "{{ wsl_host_primary_ipv4_address }}"

microk8s_metallb_ip_range: "{{ kubernetes_external_network_ipv4_cidr }}"

microk8s_cluster_domain: "cluster.local"

microk8s_cluster_dns: "{{ kubernetes_cluster_service_ipv4_cidr | ansible.utils.ipaddr('network') | ansible.utils.ipmath('4') | ansible.utils.ipaddr('address') }}"

microk8s_kubernetes_nvidia_test_image: "nvidia/cuda:12.8.0-base-ubuntu22.04"

microk8s_kubernetes_nvidia_test_yml: "{{ download_path }}/kubernetes-nvidia-test.yml"

######################################################
## Cuda
######################################################

cuda_toolkit_keyring_url: "https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.1-1_all.deb"

######################################################
## MetalLB - Fix
######################################################

metallb_fix_yml: "{{ download_path }}/metallb-fix.yml"
